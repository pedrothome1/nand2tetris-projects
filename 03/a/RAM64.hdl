// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

/**
Decimal:
0  1  2  3  4  5  6  7     000000
8  9  10 11 12 13 14 15    001000
16 17 18 19 20 21 22 23    010000
24 25 26 27 28 29 30 31    011000
32 33 34 35 36 37 38 39    100000
40 41 42 43 44 45 46 47    101000
48 49 50 51 52 53 54 55    110000
56 57 58 59 60 61 62 63    111000

Hexadecimal:
0  1  2  3  4  5  6  7
8  9  A  B  C  D  E  F
10 11 12 13 14 15 16 17
18 19 1A 1B 1C 1D 1E 1F
20 21 22 23 24 25 26 27
28 29 2A 2B 2C 2D 2E 2F
30 31 32 33 34 35 36 37
38 39 3A 3B 3C 3D 3E 3F
*/

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=la, b=lb, c=lc, d=ld, e=le, f=lf, g=lg, h=lh);

    RAM8(in=in, load=la, address=address[0..2], out=oa);
    RAM8(in=in, load=lb, address=address[0..2], out=ob);
    RAM8(in=in, load=lc, address=address[0..2], out=oc);
    RAM8(in=in, load=ld, address=address[0..2], out=od);
    RAM8(in=in, load=le, address=address[0..2], out=oe);
    RAM8(in=in, load=lf, address=address[0..2], out=of);
    RAM8(in=in, load=lg, address=address[0..2], out=og);
    RAM8(in=in, load=lh, address=address[0..2], out=oh);

    Mux8Way16(a=oa, b=ob, c=oc, d=od, e=oe, f=of, g=og, h=oh, sel=address[3..5], out=out);
}